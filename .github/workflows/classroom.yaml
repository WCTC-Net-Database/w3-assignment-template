name: Autograding

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  grade:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - run: dotnet restore
      - run: dotnet build --configuration Release --no-restore

      - name: Test (produce TRX)
        run: dotnet test --configuration Release --no-build --logger "trx;LogFileName=results.trx"

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Compute grade JSON for Classroom
        shell: bash
        run: |
          trx="$(find . -type f -name results.trx | head -n1)"
          [[ -z "$trx" ]] && { echo "No results.trx found" >&2; exit 1; }
          total=$(xmllint --xpath 'string(//Counters/@total)' "$trx")
          passed=$(xmllint --xpath 'string(//Counters/@passed)' "$trx")
          status="failed"; [[ "$passed" = "$total" && "$total" != "0" ]] && status="ok"
          cat > unit.json <<EOF
          {"version":1,"status":"$status","tests":[{"name":"Unit tests","number":1,"score":$passed,"max_score":$total,"output":"Passed $passed of $total unit tests."}]}
          EOF
          echo "UNIT_RESULTS<<EOF" >> "$GITHUB_ENV"
          cat unit.json >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
          echo "Debug UNIT_RESULTS:"; cat unit.json

      - uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/results.trx"

      - name: Publish grade to Checks (standalone)
        if: always()
        uses: actions/github-script@v7
        env:
          RESULTS: ${{ env.UNIT_RESULTS }}
        with:
          script: |
            const results = JSON.parse(process.env.RESULTS || "{}");
            const t = (results.tests && results.tests[0]) || {};
            const points = Number.isFinite(t.score) ? t.score : 0;
            const max    = Number.isFinite(t.max_score) ? t.max_score : 0;
            const summary = `Points ${points}/${max}`;
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Autograding',
              head_sha: context.sha,
              status: 'completed',
              conclusion: points === max && max > 0 ? 'success' : 'failure',
              output: {
                title: 'Autograding',
                summary,
                text: t.output || ''
              }
            });


