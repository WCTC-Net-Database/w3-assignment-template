name: Classroom Autograding (Unit Tests)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  actions: read

jobs:
  grade:
    runs-on: windows-latest
    if: github.actor != 'github-classroom[bot]'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        id: runtests
        shell: pwsh
        run: |
          dotnet test w3.tests/w3.tests.csproj `
            --configuration Release `
            --no-build `
            --logger "trx;LogFileName=results.trx"
          "exit_code=$LASTEXITCODE" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/results.trx'
          if-no-files-found: warn

      # Build JSON once, export to TWO env vars (quirk workaround)
      - name: Prepare grading JSON
        shell: pwsh
        run: |
          $passed = ("${{ steps.runtests.outputs.exit_code }}" -eq "0")
          if ($passed) { $status = "passed"; $score = 100 } else { $status = "failed"; $score = 0 }
          $json = @{ version=1; status="ok"; tests=@(@{ name="Unit Tests"; status=$status; score=$score; max_score=100; execution_time="0s"; message="" }) } | ConvertTo-Json -Compress
          @"
          UNIT_RESULTS<<EOF
          $json
          EOF
          UNIT_DUP_RESULTS<<EOF
          $json
          EOF
          "@ | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Autograding Reporter
        uses: classroom-resources/autograding-grading-reporter@v1
        with:
          runners: "unit,unit_dup"   # <- two IDs to satisfy the action
        env:
          UNIT_RESULTS: ${{ env.UNIT_RESULTS }}
          UNIT_DUP_RESULTS: ${{ env.UNIT_DUP_RESULTS }}

      - name: Fail job if tests failed
        if: ${{ steps.runtests.outputs.exit_code != '0' }}
        run: exit 1
