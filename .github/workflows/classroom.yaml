name: Autograding

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  grade:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test (produce TRX)
        run: dotnet test --configuration Release --no-build --logger "trx;LogFileName=results.trx"

      - name: Ensure jq (for JSON validation)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Compute grade JSON (namespace-safe)
        shell: bash
        run: |
          set -euo pipefail
          trx="$(find . -type f -name results.trx | head -n1)"
          [[ -z "$trx" ]] && { echo "No results.trx found"; exit 1; }

          python3 .github/scripts/parse_trx.py "$trx" > unit.json
          echo "Debug unit.json:"; cat unit.json
          jq -e . unit.json >/dev/null

          {
            echo "UNIT_RESULTS<<EOF"
            cat unit.json
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/results.trx"

      - name: Publish grade to Checks
        if: always()
        uses: actions/github-script@v7
        env:
          RESULTS: ${{ env.UNIT_RESULTS }}
        with:
          script: |
            const results = JSON.parse(process.env.RESULTS || "{}");
            const t = (results.tests && results.tests[0]) || {};
            const points = Number.isFinite(t.score) ? t.score : 0;
            const max    = Number.isFinite(t.max_score) ? t.max_score : 0;
            const summary = `Points ${points}/${max}`;
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Autograding',
              head_sha: context.sha,
              status: 'completed',
              conclusion: (points === max && max > 0) ? 'success' : 'failure',
              output: { title: 'Autograding', summary, text: t.output || '' }
            });
